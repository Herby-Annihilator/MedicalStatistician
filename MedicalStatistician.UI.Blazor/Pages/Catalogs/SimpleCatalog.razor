@page "/catalogue/simple/{Name}"
@using MedicalStatistician.DAL.Entities.Base
@using MedicalStatistician.DAL.Repositories.Base
@using System.Diagnostics

@inject ICrudRepository<Sex> sexCatalog
@inject ICrudRepository<DisabilityGroup> invalidGroupCatalog
@inject ICrudRepository<PurposeOfReferralForTreatment> purposeTreatmentCatalog
@inject ICrudRepository<WhoSentToHospital> whoSentToHospitalCatalog
@inject ICrudRepository<SourceOfLivelihood> sourceOfLivelihoodCatalog
@inject ICrudRepository<DiseaseOutcome> diseaseOutcomeCatalog
@inject ICrudRepository<CauseOfDeath> causeOfDeathCatalog
@inject ICrudRepository<Education> educationCatalog
@inject ICrudRepository<ResidenceStatus> residenceStatusCatalog
@inject ICrudRepository<TypeOfForcedTreatment> typeOfForcedTreatmentCatalog
@inject ICrudRepository<PlaceOfDeparture> placeOfDepartureCatalog
@inject ICrudRepository<TypeOfOutpatientCare> typeOfOutpatientCareCatalog
@inject ICrudRepository<OrderOfAdmission> orderOfAdmissionCatalog
@inject ICrudRepository<StatusOfJudgesDecisionUnderArticle35> statusOfJudgesDecisionUnderArticle35Catalog
@inject ICrudRepository<TypeOfJudgment> typeOfJudgmentCatalog
@inject ICrudRepository<PatientEntryRoutes> patientEntryRoutesCatalog
@inject ICrudRepository<Accommodations> accommodationsCatalog
@inject ICrudRepository<SourcesOfPaymentForMedicalCare> sourcesOfPaymentForMedicalCareCatalog


<PageTitle>Справочник</PageTitle>

<MedicalStatistician.UI.Blazor.Modal.ModalCreateUpdateCatalog @ref=Modal OnSave="OnSave"></MedicalStatistician.UI.Blazor.Modal.ModalCreateUpdateCatalog>


<h3 class="title">@Name</h3>
<p class="divider"></p>

<div class="object-right">
    <button class="btn btn-primary" @onclick="() => Create()">Добавить</button>
</div> 
@if (Collection != null)
{
    <div class="table-responsive">
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Collection)
                {
                    <tr>
                        <td>
                           @item.Name
                        </td>
                        
                        <td class="object-right">
                        <!--Кнопка редактировать-->
                            <button class="btn btn-outline-success" @onclick="() => Update(item)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                  <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"></path>
                                </svg>
                            </button>

                            <!--Кнопка удалить-->
                             <button class="btn btn-outline-danger" @onclick="() => Remove(item)">
                                 <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                  <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"></path>
                                  <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"></path>
                                </svg>
                            </button>
                        </td>
                    </tr>
                }          
            </tbody>

        </table>
    </div>
}
else
{
    <p>Загрузка...</p>
}



@code
{
    [Parameter]
    public string Name { get; set; }

    dynamic Collection, Repository;
    Type type;

    protected override async Task OnInitializedAsync()
    {
        switch (Name)
        {
            case "Пол": Collection = (await sexCatalog.GetAllAsync()).ToList();
                Repository = sexCatalog;
                type = typeof(Sex);
                break;
            case "Группы инвалидности": Collection = (await invalidGroupCatalog.GetAllAsync()).ToList();
                Repository = invalidGroupCatalog;
                type = typeof(DisabilityGroup);
                break;
            case "Цель направления": Collection = (await purposeTreatmentCatalog.GetAllAsync()).ToList();
                Repository = purposeTreatmentCatalog;
                type = typeof(PurposeOfReferralForTreatment);
                break;
            case "Кем направлен": Collection = (await whoSentToHospitalCatalog.GetAllAsync()).ToList();
                Repository = whoSentToHospitalCatalog;
                type = typeof(WhoSentToHospital);
                break;
            case "Источник средств существования": Collection = (await sourceOfLivelihoodCatalog.GetAllAsync()).ToList();
                Repository = sourceOfLivelihoodCatalog;
                type = typeof(SourceOfLivelihood);
                break;
            case "Исход заболевания": Collection = (await diseaseOutcomeCatalog.GetAllAsync()).ToList();
                Repository = diseaseOutcomeCatalog;
                type = typeof(DiseaseOutcome);
                break;
            case "Причина смерти": Collection = (await causeOfDeathCatalog.GetAllAsync()).ToList();
                Repository = causeOfDeathCatalog;
                type = typeof(CauseOfDeath);
                break;
            case "Образование": Collection = (await educationCatalog.GetAllAsync()).ToList();
                Repository = educationCatalog;
                type = typeof(Education);
                break;
            case "Статус проживания": Collection = (await residenceStatusCatalog.GetAllAsync()).ToList();
                Repository = residenceStatusCatalog;
                type = typeof(ResidenceStatus);
                break;
            case "Виды принудительного лечения": Collection = (await typeOfForcedTreatmentCatalog.GetAllAsync()).ToList();
                Repository = typeOfForcedTreatmentCatalog;
                type = typeof(TypeOfForcedTreatment);
                break;
            case "Место выбытия": Collection = (await placeOfDepartureCatalog.GetAllAsync()).ToList();
                Repository = placeOfDepartureCatalog;
                type = typeof(PlaceOfDeparture);
                break;
            case "Вид амбулаторного наблюдения": Collection = (await typeOfOutpatientCareCatalog.GetAllAsync()).ToList();
                Repository = typeOfOutpatientCareCatalog;
                type = typeof(TypeOfOutpatientCare);
                break;
            case "Порядок поступления": Collection = (await orderOfAdmissionCatalog.GetAllAsync()).ToList();
                Repository = orderOfAdmissionCatalog;
                type = typeof(OrderOfAdmission);
                break;
            case "Решение судьи по ст 35": Collection = (await statusOfJudgesDecisionUnderArticle35Catalog.GetAllAsync()).ToList();
                Repository = statusOfJudgesDecisionUnderArticle35Catalog;
                type = typeof(StatusOfJudgesDecisionUnderArticle35);
                break;
            case "В случае окончания принуд лечения": Collection = (await typeOfJudgmentCatalog.GetAllAsync()).ToList();
                Repository = typeOfJudgmentCatalog;
                type = typeof(TypeOfJudgment);
                break;
            case "Откуда поступил": Collection = (await patientEntryRoutesCatalog.GetAllAsync()).ToList();
                Repository = patientEntryRoutesCatalog;
                type = typeof(PatientEntryRoutes);
                break;
            case "Условия проживания": Collection = (await accommodationsCatalog.GetAllAsync()).ToList();
                Repository = accommodationsCatalog;
                type = typeof(Accommodations);
                break;
            case "Источники оплаты медицинской помощи": Collection = (await sourcesOfPaymentForMedicalCareCatalog.GetAllAsync()).ToList();
                Repository = sourcesOfPaymentForMedicalCareCatalog;
                type = typeof(SourcesOfPaymentForMedicalCare);
                break;

            default:
                break;
        }
    }

    private async Task Remove<T>(T item) where T: Entity
    {
        if (Collection == null)
            return;           
        await Repository.DeleteAsync(item);
        Collection.Remove(item);  
    }


    private async Task Create()
    {
        Modal.Title = "Добавление данных";
        Modal.SaveButtonName = "Добавить";
        Modal.Open();
    }

    private async Task Update<T>(T item) where T: NamedEntity
    {
        Modal.Title = "Изменение данных";
        Modal.SaveButtonName = "Изменить";
        entityToUpdate = item;
        Modal.Open();
    }

    private async Task OnCreate()
    {
        dynamic entity = type.GetConstructor(new Type[] { }).Invoke(new dynamic[] { });
        entity.Name = Modal.ItemName;
        await Repository.CreateAsync(entity);
        Collection.Add(entity);
    }

    private async Task OnUpdate()
    {
        entityToUpdate.Name = Modal.ItemName;            
        await Repository.UpdateAsync(entityToUpdate);
    }

    //
    // Работа с модальным окном
    //
    MedicalStatistician.UI.Blazor.Modal.ModalCreateUpdateCatalog Modal { get; set; }

    private dynamic entityToUpdate;
    private async Task OnSave()
    {
        if (Modal.ItemName != "")           
            if (Modal.SaveButtonName == "Добавить")
                await OnCreate();
            else
                await OnUpdate();
        Modal.Close();
    }

}

